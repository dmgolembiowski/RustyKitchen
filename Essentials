# Put this above any unused code:
```
#[allow(dead_code)]
```

# Common Smart Pointers in the Standard Library
+ `Box<T>` for allocating values on the heap,
+ `Rc<T>`, a reference counting type that enables multiple ownership,
+ `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces the borrowing rules at runtime instead of compile time.

# Closure (Similar to Lambda Expressions) Syntax
```
// Not a closure:
fn add_one_1 (x: u32) -> u32 {x+1}

// Closures:
let add_closure = |x, y| x + y;
let add_one     = |x| x + 1;

// Verbose Closures (Unnecessary):
let add_one_v2 = |x| { x + 1 };
let add_one_v3 = |x: u32| -> u32 { x + 1 };
```

# Excessive closure
```
// Defining a closure and storing it in the expensive_closure var
let expensive_closure = |num| {
    println!("calculating slowly...");
    std::thread()::sleep(std::time::Duration::from_secs(2));
    num
};
# Single statement for getting an integer from input
```
use std::io;

fn main() {
    let stdin_int => {
        let mut stdin_str = String::new();
        io::stdin().read_line(&mut stdin_str)
            .expect("ValueError: Must be a valid string of UTF-8 literals");
    let _int: u32 = stdin_str.parse();
    println!("You entered: {}", _int);
    }

    stdin_int();
}
```
<br></br>

# Declaring compounded tuples
```
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
}
// Note that it's immutable, but supports shadowing
```

<br />


# Basic Destructuring
This is a lot like a Python coding pattern, where
the program has a generator and yields elements
to list slices, then assigns the slices to variable
names (all in one step).

```
# Python-ic implementation
source = [500, 6.4, 1]
g = (x for x in source)
receiver = []

while True:
    try:
        receiver.append(next(g))
    except StopIteration:
        break

tup = tuple(receiver)
x, y, z = tup
tup = () # <-- This step happens in Rust, but not Python
```
Whereas in Rust:
```
fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is {}", y);
}



# Other Slices Syntax

```
let a = [1, 2, 3, 4, 5];
// to refer to part of an array, do:
let slice = &a[1..3];
//^ This is a common pattern for types &[i32],
// by storing a ref to the first element and a length.
// It's commonly used in other collections

# Hashmap
use std::collections::HashMap;

fn hm() {
    let mut map = HashMap::new();
    map.insert(1,2);
}

# Providing New Names with the `as` Keyword
```
use std::fmt::Result;
use std::io::Result as IoResult;

fn func1() -> Result {
    // ---
}

fn func2() -> IoResult<()> {
    // ---
}
```
# Import globbing
```
use std::collections::*;
```

# Concatenating Strings
# The Short Way:

```
let this_p = String::from("hello, ");
let art = String:: from("it's me.");
let this_part = &this_p+&art;
// Can use & for a reference if desired

# The Other Way:
let this_other_part = format!("{}{}", this_p, art);
```

# I/O Basics
```

