# Put this above any unused code:
```
#[allow(dead_code)]
```

# Single statement for getting an integer from input
```
use std::io;

fn main() {
    let stdin_int => {
        let mut stdin_str = String::new();
        io::stdin().read_line(&mut stdin_str)
            .expect("ValueError: Must be a valid string of UTF-8 literals");
    let _int: u32 = stdin_str.parse();
    println!("You entered: {}", _int);
    }

    stdin_int();
}
```
<br></br>

# Declaring compounded tuples
```
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
}
// Note that it's immutable, but supports shadowing
```

<br />


# Basic Destructuring
This is a lot like a Python coding pattern, where
the program has a generator and yields elements
to list slices, then assigns the slices to variable
names (all in one step).

```
# Python-ic implementation
source = [500, 6.4, 1]
g = (x for x in source)
receiver = []

while True:
    try:
        receiver.append(next(g))
    except StopIteration:
        break

tup = tuple(receiver)
x, y, z = tup
tup = () # <-- This step happens in Rust, but not Python
```
Whereas in Rust:
```
fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is {}", y);
}



# Other Slices Syntax

```
let a = [1, 2, 3, 4, 5];
// to refer to part of an array, do:
let slice = &a[1..3];
//^ This is a common pattern for types &[i32],
// by storing a ref to the first element and a length.
// It's commonly used in other collections
